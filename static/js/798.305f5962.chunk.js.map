{"version":3,"file":"static/js/798.305f5962.chunk.js","mappings":"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","sources":["static/til/til_20250219.tsx"],"sourcesContent":["import React from 'react';\n\nconst TIL20250219: React.FC = () => {\n    return (\n        <div>\n            <h2>20250219 TIL</h2>\n            <article>\n                <h3>배열과 객체</h3>\n                <ul>\n                    <li>대량의 데이터를 쉽게 관리하고 활용</li>\n                </ul>\n                <h3>객체(Object)</h3>\n                <ul>\n                    <li>여러 데이터를 키와 값 형태로 묶어 표현할 수 있다</li>\n                    <li>객체는 데이터의 구조화된 저장소 역할</li>\n                </ul>\n                <h3>배열(Array)</h3>\n                <ul>\n                    <li>배열은 여러 데이터를 순서대로 나열하여 관리할 수 있는 리스트 형태의 데이터 타입</li>\n                    <li>각 데이터는 인덱스로 접근</li>\n                </ul>\n                <h3>함수(Function)</h3>\n                <ul>\n                    <li>함수는 특정 작업을 수행하는 코드 블록</li>\n                    <li>값처럼 변수에 저장하거나 다른 함수에 전달</li>\n                </ul>\n                <h3>참조 타입의 특징</h3>\n                <ul>\n                    <li>참조 저장\n                        <ul>\n                            <li>참조 타입은 값을 저장하는 대신 메모리 주소를 저장</li>\n                            <li>하나의 객체를 여러 변수가 공유할 수 있다</li>\n                        </ul>\n                    </li>\n                    <li>데이터 복사\n                        <ul>\n                            <li>참조 타입을 복사하면 새로운 객체가 만들어지는 것이 아니라 같은 객체를 참조</li>\n                            <li>독립적인 복사가 필요한 경우 얕은 복사 또는 깊은 복사가 필요</li>\n                        </ul>\n                    </li>\n                </ul>\n                <h3>얕은 복사</h3>\n                <ul>\n                    <li>객체의 1단계 데이터만 복사</li>\n                    <li>중첩된 객체나 배열은 참조(주소)만 복사</li>\n                    <li>복사본에서 중첩 데이터를 수정하면 원본에도 영향을 미친다</li>\n                    <li>사용 예\n                        <ul>\n                            <li>스프레드 연산자(…)</li>\n                            <li>Object.assign() 메서드</li>\n                        </ul>\n                    </li>\n                </ul>\n                <h3>깊은 복사</h3>\n                <ul>\n                    <li>JSON.parse(JSON.stringify()) (단순 객체/배열에 적합)</li>\n                    <li>라이브러리(Lodash의 cloneDeep)</li>\n                </ul>\n                <h3>배열</h3>\n                <ul>\n                    <li>여러 데이터를 하나의 리스트로 묶어서 관리할 수 있는 데이터 타입</li>\n                    <li>숫자, 문자열, 객체, 함수 등 다양한 타입의 데이터를 순서대로 저장할 수 있는 구조</li>\n                    <li>배열의 각 요소는 Index를 통해 접근할 수 있으며 데이터를 효율적으로 관리하거나 조작할 때 유용</li>\n                </ul>\n                <h3>배열의 특징</h3>\n                <ol>\n                    <li>순서가 있는 데이터 집합</li>\n                    <li>다양한 타입 저장 가능</li>\n                    <li>동적 크기</li>\n                </ol>\n                <h3>배열 생성 방법</h3>\n                <ul>\n                    <li>리터럴 표기법 : 가장 간단하고 일반적인 배열 생성 방식</li>\n                    <li>Array 생성자 : Array 객체를 사용해 배열을 생성할 수도 있다</li>\n                </ul>\n                <h3>배열의 주요 메서드</h3>\n                <ol>\n                    <li>요소 추가와 제거\n                        <ul>\n                            <li>push() : 배열의 끝에 요소 추가</li>\n                            <li>pop() : 배열의 마지막 요소 제거</li>\n                            <li>unshift() : 배열의 앞에 요소 추가</li>\n                            <li>shift() : 배열의 첫 번째 요소 제거</li>\n                        </ul>\n                    </li>\n                    <li>배열의 순회\n                        <ul>\n                            <li>for 루프 또는 forEach() 메서드를 사용하여 배열의 각 요소를 순회할 수 있다</li>\n                            <li>forEach()는 콜백 함수를 사용하여 요소를 처리하므로 반복문을 종료하거나 건너뛰는 방법이 제공되지 않는다</li>\n                            <li>forEach()는 배열에 대해서만 사용 가능</li>\n                            <li>forEach()는 비동기 처리가 어렵다</li>\n                        </ul>\n                    </li>\n                    <li>배열 검사\n                        <ul>\n                            <li>includes() : 특정 요소가 배열에 포함되어 있는지 확인</li>\n                            <li>indexOf() : 특정 요소의 인덱스 반환</li>\n                        </ul>\n                    </li>\n                </ol>\n                <h3>기본 반복문</h3>\n                <ol>\n                    <li>for 루프\n                        <ul>\n                            <li>for 루프는 가장 기본적인 반복문</li>\n                            <li>배열의 길이를 기준으로 각 요소를 처리</li>\n                            <li>인덱스 접근</li>\n                            <li>범용적</li>\n                        </ul>\n                    </li>\n                    <li>for…of 루프\n                        <ul>\n                            <li>배열 요소만 순회하며 인덱스는 제공하지 않는다</li>\n                            <li>코드를 간결하게 작성</li>\n                        </ul>\n                    </li>\n                </ol>\n            </article>\n            <article>\n                <h3>객체</h3>\n                <ul>\n                    <li>자바 스크립트의 가장 중요한 데이터 구조</li>\n                    <li>데이터를 키-값 형태로 저장</li>\n                    <li>객체를 사용하면 다양한 속성을 가진 복잡한 데이터를 하나의 구조로 묶어서 관리</li>\n                    <li>키 : 속성을 구분하는 이름으로 문자열 또는 심볼 타입</li>\n                    <li>값 : 키에 연결된 데이터로 모든 데이터 타입을 사용</li>\n                </ul>\n                <h3>객체 생성 방법</h3>\n                <ol>\n                    <li>객체 리터럴 방식</li>\n                    <li>Object 생성자</li>\n                    <li>Object.create()\n                        <ul>\n                            <li>Object.create()는 기존 객체를 프로토타입으로 지정</li>\n                            <li>그 객체의 속성이나 메서드를 상속받은 새로운 객체를 만들 때 유용</li>\n                        </ul>\n                    </li>\n                </ol>\n                <h3>객체 속성 접근</h3>\n                <ol>\n                    <li>점 표기법 : 객체 속성에 접근할 때 점을 사용</li>\n                    <li>대괄호 표기법 : 속성 이름을 문자열로 지정하거나 변수로 동적으로 접근할 때 사용</li>\n                </ol>\n                <h3>객체의 주요 메소드</h3>\n                <ul>\n                    <li>Object.keys()\n                        <ul>\n                            <li>객체의 모든 키를 배열로 반환</li>\n                        </ul>\n                    </li>\n                    <li>Object.values()\n                        <ul>\n                            <li>객체의 모든 값을 배열로 반환</li>\n                        </ul>\n                    </li>\n                    <li>Object.entries()\n                        <ul>\n                            <li>객체의 키와 값을 배열 형태로 반환</li>\n                        </ul>\n                    </li>\n                    <li>Object.assign()\n                        <ul>\n                            <li>객체를 복사하거나 병합</li>\n                        </ul>\n                    </li>\n                </ul>\n                <h3>객체 속성 추가</h3>\n                <ul>\n                    <li>점 표기법 또는 대괄호 표기법으로 새로운 속성을 추가</li>\n                </ul>\n                <h3>속성 삭제</h3>\n                <ul>\n                    <li>delete 키워드를 사용해 속성을 삭제</li>\n                </ul>\n\n                <h3>대괄호 표기법의 특징</h3>\n                <ul>\n                    <li>동적 속성 이름 사용 가능</li>\n                    <li>변수 또는 문자열로 속성 접근\n                        <ul>\n                            <li>속성 이름이 변수, 공백이 포함된 문자열 또는 특수 문자인 경우 대괄호 표기법이 필요</li>\n                        </ul>\n                    </li>\n                </ul>\n                <h3>객체와 반복</h3>\n                <ol>\n                    <li>for…in 반복문\n                        <ul>\n                            <li>객체의 속성을 순회할 때 사용</li>\n                            <li>for in은 객체의 상속된 속성까지 순회</li>\n                            <li>hasOwnProperty()를 사용하여 자기 자신만의 속성인지 확인할 필요가 있다</li>\n                        </ul>\n                    </li>\n                    <li>Object.entries() 와 반복문\n                        <ul>\n                            <li>Object.entries()를 사용해 키와 값을 함께 순회</li>\n                            <li>for of 반복문을 사용하여 key, value 쌍을 순회하고 각 항목을 출력</li>\n                            <li>구조 분해 할당 let [key, value]를 사용하여 키와 값을 바로 사용할 수 있다</li>\n                            <li>Object.entries()를 사용하면 배열로 변환된 후에 다양한 배열 메서드를 사용할 수 있다</li>\n                            <li>map(), filter(), reduce() 등 배열의 고급 기능을 객체의 키값 쌍에 적용할 수 있다</li>\n                        </ul>\n                    </li>\n                </ol>\n                <h3>객체 활용 예시</h3>\n                <ul>\n                    <li>객체로 데이터 관리</li>\n                    <li>함수와 객체의 조합</li>\n                </ul>\n            </article>\n\n            <article>\n                <h3>기본 내장 함수</h3>\n                <ul>\n                    <li>배열, 문자열, 객체 등 다양한 데이터 타입을 쉽게 다룰 수 있도록 JS에서 미리 제공하는 함수</li>\n                </ul>\n                <h3>배열의 기본 내장 함수</h3>\n                <ol>\n                    <li>요소 추가와 제거\n                        <ul>\n                            <li>push() : 배열의 끝에 요소를 추가\n                                <ul>\n                                    <li>반환값 : 새 배열의 길이</li>\n                                </ul>\n                            </li>\n                            <li>pop() : 배열의 마지막 요소를 제거\n                                <ul>\n                                    <li>반환값 : 제거된 요소</li>\n                                </ul>\n                            </li>\n                            <li>unshift() : 배열의 앞에 요소를 추가\n                                <ul>\n                                    <li>반환값 : 새 배열의 길이</li>\n                                </ul>\n                            </li>\n                            <li>shift() : 배열의 첫 번째 요소를 제거\n                                <ul>\n                                    <li>반환값 : 제거된 요소</li>\n                                </ul>\n                            </li>\n                        </ul>\n                    </li>\n                    <li>요소 탐색\n                        <ul>\n                            <li>indexOf() : 배열에서 특정 요소의 인덱스를 반환. 요소가 없으면 -1을 반환</li>\n                            <li>includes() : 배열에 특정 요소가 있는지 확인\n                                <ul>\n                                    <li>반환값 : true or false</li>\n                                </ul>\n                            </li>\n                        </ul>\n                    </li>\n                    <li>배열 변형\n                        <ul>\n                            <li>reverse() : 배열의 요소 순서를 뒤집는다\n                                <ul>\n                                    <li>원본 배열이 변경</li>\n                                </ul>\n                            </li>\n                            <li>sort() : 배열의 요소를 정렬\n                                <ul>\n                                    <li>기본적으로 문자열 기준으로 정렬</li>\n                                    <li>숫자를 정렬하려면 콜백 함수를 제공해야 한다</li>\n                                </ul>\n                            </li>\n                        </ul>\n                    </li>\n                    <li>요소 복사와 추출\n                        <ul>\n                            <li>slice() : 배열의 일부를 복사하여 새로운 배열을 반환\n                                <ul>\n                                    <li>원본 배열은 변경되지 않는다</li>\n                                </ul>\n                            </li>\n                            <li>splice() : 배열에서 특정 위치의 요소를 제거하거나 추가\n                                <ul>\n                                    <li>원본 배열이 변경</li>\n                                </ul>\n                            </li>\n                        </ul>\n                    </li>\n                </ol>\n            </article>\n            <article>\n                <h3>객체 내장 함수</h3>\n                <ol>\n                    <li>객체 탐색\n                        <ul>\n                            <li>Object.keys() : 객체의 모든 키를 배열로 반환\n                                <ul>\n                                    <li>키가 무엇인지 알고 싶을 때 사용</li>\n                                </ul>\n                            </li>\n                            <li>Object.values() : 객체의 모든 값을 배열로 반환\n                                <ul>\n                                    <li>객체의 데이터만 필요할 때 유용</li>\n                                </ul>\n                            </li>\n                            <li>Object.entries() : 객체의 키와 값을 배열의 형태로 반환\n                                <ul>\n                                    <li>각 키-값 쌍이 배열로 묶인 형태의 배열을 반환</li>\n                                </ul>\n                            </li>\n                        </ul>\n                    </li>\n                    <li>객체 생성\n                        <ul>\n                            <li>Object.assign() : 객체를 복사하거나 여러 객체를 하나로 합칠 때 사용</li>\n                            <li>Object.create() : 특정 프로토타입을 가진 객체를 생성</li>\n                        </ul>\n                    </li>\n                    <li>속성 정의 및 조작\n                        <ul>\n                            <li>Object.defineProperty() : 객체에 새로운 속성을 정의하거나 기존 속성을 수정할 때 사용\n                                <ul>\n                                    <li>속성의 제어 옵션(읽기/쓰기가능 여부)을 설정할 수 있다</li>\n                                </ul>\n                            </li>\n                            <li>Object.defineProperties() : 객체에 여러 개의 속성을 한 번에 정의</li>\n                        </ul>\n                    </li>\n                    <li>속성 확인 및 비교\n                        <ul>\n                            <li>Object.hasOwnProperty() : 객체에 특정 키가 존재하는지 확인</li>\n                            <li>Object.is() : 두 값이 엄격하게 같은지를 비교\n                                <ul>\n                                    <li>===와 유사하지만 NaN 및 +0, -0의 비교를 정확히 처리한다</li>\n                                </ul>\n                            </li>\n                        </ul>\n                    </li>\n                    <li>객체 고정 및 보호\n                        <ul>\n                            <li>Object.freeze() : 객체를 동결하여 수정할 수 없게 만든다\n                                <ul>\n                                    <li>새로운 속성을 추가하거나 기존 속성을 변경할 수 없다</li>\n                                </ul>\n                            </li>\n                            <li>Object.seal() : 객체의 속성을 추가하거나 삭제할 수 없게 만든다\n                                <ul>\n                                    <li>기존 속성의 값은 수정할 수 있다</li>\n                                </ul>\n                            </li>\n                        </ul>\n                    </li>\n                    <li>객체에서 유용한 활용 사례\n                        <ul>\n                            <li>객체를 키-값 쌍으로 변환하고 다시 객체로 만들기</li>\n                            <li>객체 비교를 통한 동작</li>\n                        </ul>\n                    </li>\n                </ol>\n                <h3>문자열의 기본 내장 함수</h3>\n                <ol>\n                    <li>문자 검색\n                        <ul>\n                            <li>indexOf() : 문자열에서 특정 문자 또는 문자열의 첫 번째 인덱스를 반환</li>\n                            <li>includes() : 문자열에 특정한 문자 또는 문자열이 포함되어 있는지 확인</li>\n                        </ul>\n                    </li>\n                    <li>문자 변환\n                        <ul>\n                            <li>toUpperCase() : 문자열을 대문자로 변환</li>\n                            <li>toLowerCase() : 문자열을 소문자로 변환</li>\n                        </ul>\n                    </li>\n                </ol>\n                <h3>기본 내장 함수를 배워야 하는 이유</h3>\n                <ul>\n                    <li>효율적인 작업</li>\n                    <li>코드 가독성 향상</li>\n                    <li>생산성 증가</li>\n                </ul>\n            </article>\n        </div>\n    );\n};\n\nexport default TIL20250219;\n"],"names":["TIL20250219","_jsxs","children","_jsx"],"sourceRoot":""}