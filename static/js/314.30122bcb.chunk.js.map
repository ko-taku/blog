{"version":3,"file":"static/js/314.30122bcb.chunk.js","mappings":"8IAEA,MAuDA,EAvD8BA,KAEtBC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBACJD,EAAAA,EAAAA,MAAA,WAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBACJD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+DACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2GACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wGAGRC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+BACJD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+JACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uEACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uDACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wHACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+GAGRC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6LACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oQAGRC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uPACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6KAGRC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gKACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4RACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iIAGRC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACJD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2CACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mLAGRC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,8BACJC,EAAAA,EAAAA,KAAA,MAAAD,UACID,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CAAI,qPAAsE,kD","sources":["static/til/til_20250224.tsx"],"sourcesContent":["import React from 'react';\n\nconst TIL20250224: React.FC = () => {\n    return (\n        <div>\n            <h2>20250224 TIL</h2>\n            <article>\n                <h3>함수</h3>\n                <ul>\n                    <li>변수에 할당할 수 있다</li>\n                    <li>다른 함수의 전달인자로 전달될 수 있다</li>\n                    <li>다른 함수의 결과로써 리턴될 수 있다</li>\n                </ul>\n\n                <h3>고차 함수</h3>\n                <ul>\n                    <li>함수를 전달인자로 받을 수 있고 함수를 리턴할 수 있는 함수</li>\n                    <li>for문보다 성능이 뛰어나다</li>\n                    <li>코드가 간결해진다</li>\n                    <li>콜백 함수: 함수의 전달인자로 전달되는 함수</li>\n                    <li>커링 함수: 함수를 전달인자로 받는 함수</li>\n                </ul>\n\n                <h3>filter</h3>\n                <ul>\n                    <li>모든 배열의 요소 중에서 특정 조건을 만족하는 요소를 걸러내는 메서드</li>\n                    <li>filter나 map처럼 메소드와 같이 함수명을 필요로 하지 않는 곳에서 화살표 함수를 익명 함수로 사용 가능</li>\n                </ul>\n\n                <h3>map()</h3>\n                <ul>\n                    <li>배열의 각 요소에 대해 주어진 함수를 실행하고 그 결과로 새로운 배열을 반환하는 배열 메소드</li>\n                    <li>배열의 각 요소에 대해 일관된 작업을 수행하려는 경우 사용한다</li>\n                </ul>\n\n                <h3>reduce()</h3>\n                <ul>\n                    <li>배열의 각 요소를 처리하면서 누적값을 계산(합계, 최대값 등)</li>\n                    <li>두 번째 인수로 초기값을 지정할 수 있으며 지정하지 않으면 첫 번째 요소가 자동으로 accumulator의 초기값으로 사용</li>\n                    <li>배열을 순회하여 그 결과를 하나의 값으로 반환</li>\n                </ul>\n\n                <h3>추상화</h3>\n                <ul>\n                    <li>생산성의 향상</li>\n                    <li>추상화의 관점에서 함수를 바라보면 함수는 사고 또는 논리의 묶음</li>\n                </ul>\n\n                <h3>추가내용</h3>\n                <ul>\n                    <li>filter, map, reduce 등을 사용하여 화살표 함수를 사용할 때 조건문을 사용하고 싶으면 화살표 함수 내부를 { }묶어줘야 한다</li>\n                </ul>\n            </article>\n        </div>\n    );\n}\n\nexport default TIL20250224;\n"],"names":["TIL20250224","_jsxs","children","_jsx"],"sourceRoot":""}